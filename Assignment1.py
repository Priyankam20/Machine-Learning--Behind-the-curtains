# -*- coding: utf-8 -*-
"""Assignment_1_Solution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/142mEERbCmHi2zGIKBFZgMdc2yczP8Mrm
"""

import numpy as np

"""Q1 Let x = np.arange(4, dtype=np.int64). Create an array of ones with the same shape and type as X."""

x = np.arange(4, dtype=np.int64)
np.ones_like(x)

"""Q2 Let X = np.array([[1, 2], [3, 4]]). Convert it into a matrix."""

X = np.array([[1, 2], [3, 4]])
np.asmatrix(X)

"""Q3 Create a 1-D array of 50 evenly spaced elements between 3. and 10., inclusive."""

np.linspace(3., 10, 50)

"""Q4 Let x be array [[1, 2, 3], [4, 5, 6]]. Convert it to [1 4 2 5 3 6]."""

x = np.array([[1, 2, 3], [4, 5, 6]])
out1 = np.ravel(x, order='F')
out2 = x.flatten(order="F")
assert np.allclose(out1, out2)
print (out1)

"""Q5 Let x be an array [1, 2, 3, ..., 9]. Split x into 3 arrays, each of which has 4, 2, and 3 elements in the original order."""

x = np.arange(1, 10)
print (np.split(x, [4, 6]))

""" Q6 Compute the inverse and primary diagnol sum of x=[[1,2],[3,4]]"""

x = np.array([[1., 2.], [3., 4.]])
out1 = np.linalg.inv(x)
assert np.allclose(np.dot(x, out1), np.eye(2))
print (out1,np.trace(x))

"""Q7 Sort x along the second axis. x = [[1,4],[3,1]]"""

x = np.array([[1,4],[3,1]])
out = np.sort(x, axis=1)
x.sort(axis=1)
assert np.array_equal(out, x)
print (out)

"""Q8 Get the indices that would sort x(as above) along the second axis."""

x = np.array([[1,4],[3,1]])
out = np.argsort(x, axis=1)
out

"""Initiate x as a 2x5 array with random values from 0 to 10(not inclusive).Get the maximum and minimum values and their indices of x along the second axis."""

x = np.random.permutation(10).reshape(2, 5)
print ("x =", x)
print ("maximum values =", np.max(x, 1))
print ("max indices =", np.argmax(x, 1))
print ("minimum values =", np.min(x, 1))
print ("min indices =", np.argmin(x, 1))

"""Run the following load command to get the 2-Dim iris dataset. Do the following operations on it."""

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris_2d = np.genfromtxt(url, delimiter=',', dtype='float', usecols=[0,1,2,3])

"""Drop rows that contain a missing value. """

# Method 1:
any_nan_in_row = np.array([~np.any(np.isnan(row)) for row in iris_2d])
iris_2d[any_nan_in_row]

# Method 2: (By Rong)
iris_2d[np.sum(np.isnan(iris_2d), axis = 1) == 0]

"""Find the correlation between first two columns."""

np.corrcoef(iris_2d[:, 0], iris_2d[:, 2])[0, 1]

"""Find the mean,median and standard deviation of column 3."""

mu, med, sd = np.mean(iris_2d[2]), np.median(iris_2d[2]), np.std(iris_2d[2])
print(mu, med, sd)

"""Create a new column for volume in iris_2d, where volume is (pi x petallength x sepal_length^2)/3"""

sepallength = iris_2d[:, 0].astype('float')
petallength = iris_2d[:, 2].astype('float')
volume = (np.pi * petallength * (sepallength**2))/3

# Introduce new dimension to match iris_2d's
volume = volume[:, np.newaxis]

# Add the new column
out = np.hstack([iris_2d, volume])

# View
out[:4]

"""Run the following loaad command and solve the following questions"""

url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data'
iris = np.genfromtxt(url, delimiter=',', dtype='object')
names = ('sepallength', 'sepalwidth', 'petallength', 'petalwidth', 'species')

"""Find the count of unique species."""

species = np.array([row.tolist()[4] for row in iris])
np.unique(species, return_counts=True)

"""Bin the petal length (3rd) column of iris_2d to form a text array, such that if petal length is:
Less than 3 –> ‘small’
3-5 –> ‘medium’
‘>=5 –> ‘large’
"""

petal_length_bin = np.digitize(iris[:, 2].astype('float'), [0, 3, 5, 10])

# Map it to respective category
label_map = {1: 'small', 2: 'medium', 3: 'large', 4: np.nan}
petal_length_cat = [label_map[x] for x in petal_length_bin]

# View
petal_length_cat

"""Find the most frequent value of petal length (3rd column) in iris dataset"""

vals, counts = np.unique(iris[:,2], return_counts=True)
print(vals[np.argmax(counts)])